---
layout: post
title: "동적 SQL"
date: 2022-07-26
categories: SQL-Server
---


# WIP - 동적 SQL

[toc]

---------------------------------------------------

## 개요

동적 SQL(동적으로 실행되는 코드) 는 커서나 임시테이블 같이 매우 유의해서 사용 필요. 의도와 다르게 실행 될 수 있고, 보안 공격의 대상이 될 수 있고, 관리가 어렵다.

반면에, 유의해서 사용하기만 하면 동적 SQL은 다른 방법을 통해서 구현하기 어려운 기능을 구현할 수 있다는 장점이 있음.

SQL Server 는 동적 SQL을 지원하기 위해 `EXEC`(EXECUTE 의 약어) 와 `sp_executesql` 두 가지 방법을 지원.

> TIP: `EXEC` 명령은 두가지 용도로 사용된다.
  `EXEC {proc} {param}` 과 같이, 프로시저를 호출하기 위한 용도와
  `EXEC {문자열}` 과 같이 동적 SQL 코드를 실행하기 위해 사용한다.


### 유의 사항

동적 SQL 은 비록 저장 프로시저 내에 있는 코드라고 하더라도,
실행 할 수 있는 권한이 사용자에게 부여되야 실행 가능하다.
즉, 동적 코드에 대한 EXECUTE 권한이 사용자에게 직접적으로 부여되어야 한다.

* 버전이 지나면서 완화됨. 추가로 확인 필요.
* TODO: `EXECUTE AS` 와 관련된 내용 찾아보기.

- 동적 SQL은 호출자 배치와 독립적으로 구분된 배치로 동작된다. 
  - 독립적인 단위로 구문 분석(parse) 및 이름 확인(resolution) 이 수행되고, 
    최적화 작업이 실행된다.

- 호출자 배치의 환경 설정(세션 옵션, 데이터베이스 컨텍스트 등)은 호출 스택의 
  모든 하위 수준에 영향을 비친다. 호출자 배치에서 `USE {DB}` 를 
  사용하여 데이터베이스 컨텍스트를 변경한다면, USE의 영향으로 변경된 
  데이터베이스에서 실행된다.
  - 단 하위 배치의 환경 설정 변경은 상위 수준에 영향을 주지 않는다.

- 환경 설정과 유사하게, 호출자 배치에서 생성된 로컬 임시 테이블은 하위 
  배치에서 참조되지만, 하위 동적 배치에서 생성한 임시 테이블은 상위 배치에서 
  사용 할 수 없다.

- 로컬 변수는 선언된 배치에서만 참조할 수 있다. 
  로컬 변수는 하위 배치에서 참조할 수 없다.

---------------------------------------------------

## `sp_executesql` 와 `EXEC` 비교

일반적으로, `sp_executesql` 을 사용하는 방법이 입력/출력 매개변수를 
사용 할 수 있는 인터페이스를 제공하므로 `EXEC` 보다 선호된다.

`sp_executesql` 를 사용하는 방법은, 실행될 때마다 전달되는 인수의 값만 
다르게 하여 동일한 쿼리 문자열을 생성할 수 있기 때문에 동일한 쿼리 문자열을
반복적으로 실행하여 실행 계획을 재사용 할 수 있는 가능성을 높일 수 있다.

`sp_executesql` 을 사용하는 방법에 비해 `EXEC` 를 사용하는 방법이 좀 더 
유연성을 제공한다. 하지만 명시적으로 `EXEC` 명령을 사용해야하는 이유가 없다면,
`sp_executesql` 를 쓰는게 바람직하다.

---------------------------------------------------

## `EXEC` 예시

```sql
SET NOCOUNT ON
USE Northwind;

DECLARE @schemaname AS NVARCHAR(128), @tablename AS NVARCHAR(128);
SET @schemaname = N'dbo';
SET @tablename = N'Orders';

DECLARE @objectname AS NVARCHAR(517);
SET @objectname = QUOTENAME(@schemaname) + N'.' + QUOTENAME(@tablename);

EXEC(N'SELECT COUNT(*) FROM ' + @objectname + N';');
```

- `EXEC` 명령 내에는 문자열과 문자열 변수를 and또는 or 로 조합한 문자열만 
  입력 가능.

- `EXEC` 내에는 CASE 식 또는 SQL 함수를 사용 할 수 없음.
  - 위 예시에서 `QUOTENAME` 함수를 EXEC에 추가해서 사용 할 수 없음. 
  - 이런 경우 때문에 대부분 문자열 변수에 대입 후 사용.


### 변수에 문자열을 조합하는 처리의 단점

#### adhoc 생성

동일한 쿼리 패턴이여도 각 쿼리 문자열이 조합되어 실행될 때마다 새로운 임의
(ad-hoc) 쿼리 실행 계획을 생성한다.

#### 실행 계획

동적으로 실행되는 코드는 고유한 속성을 가지는 컬럼(unique)에 대한 필터 
조건이 설정되어, 자동 매개변수화 된다. 
그리하여, 매개변수화된 실행 계획이 되고 재사용된다.
그럼에도 불구하고, 정확하게 일치하는 쿼리 문자열이 재실행되는 경우, 
다시 사용하기 위해서 매개변수값에 따라 별도 임의 실행 계획이 다시 생성된다.

결국 여러개의 실행 계획을 생성하기 위해 비용과 리소스가 소모된다.

###  `EXEC` 예시 2 

- TODO

