---
layout: post
title: "임시 테이블과 테이블 변수"
date: 2022-07-24
categories: SQL-Server
---



# 임시 테이블과 테이블 변수

[toc]

---------------------------------------------------

# 임시 테이블 개요

데이터를 임시로 저장해야되는 상황에서 사용된다.
다른 방법으로는 뷰, 인라인 테이블 값 사용자 정의 함수, 파생 테이블, 
공통 테이블식(CTE)과 같은 테이블식이나 테이블 변수등을 사용하여 물리적/논리적 으로 처리.

## 주 사용 사례

- 일정 기준(사원별, 월별 등)에 따라 집계된 데이터를 저장 후 저장된 결과에 대해 통계를 위한 쿼리 수행
- 페이징 처리를 위해 쿼리 결과 저장
- 쿼리의 중간 결과를 저장한 다음, 중간 결과에 다시 쿼리를 실행해야되는 경우
- CUBE/ROLLUP 쿼리의 결과를 저장하고, 저장된 결과에 다시 쿼리를 수행하는 경우
- 커서의 결과 집합에서 반환하는 행 단위로 추가적인 작업을 위한 정보 조회 또는 계산 결과 저장.
- Insert를 하기 전에 취소를 위해 해당 데이터를 별도로 저장해야되는 경우.

## 장점

- 원본 데이터에 설정된 인덱스가 비효율적이거나 사용될 수 없을 때,
원본 데이터에 사전 계산 작업을 통해 가공하여 인덱스 생성할 수 있음.

- 단계별로 접근하여 문제를 해결하는 경우 중간 결과를 저장할때 좋음.

---------------------------------------------------

# 임시 테이블

> 로컬 임시 테이블, 전역 임시 테이블을 지원.

## 로컬 임시 테이블

### tempdb

임시테이블은 현재 데이터베이스 컨텍스트와 무관하게 tempdb 데이터베이스에 생성됨.
메모리 공간이 여유로우면 메모리에만 존재하고, 메모리가 모자라면 디스크에 저장한다.
복구 모델은 SIMPLE 이며 변경 불가능하다.

tempdb는 복구 프로세스가 없고, 최소한의 로깅만 지원한다.
 
> TIP: 임시 테이블이 존재하는지 확인하기 위해서는 반드시 `tempdb` 를 
  기준으로 찾아야한다. `#T1` 이 존재하는지 찾기 위해선 반드시 `OBJECT_ID(tempdb.#T1)` 으로 호출한다.

### 참조 범위(scope) 와 가시성(visibility)

임시 테이블 이름 앞에 숫자기호(#) 을 접두사로 사용.
**임시 테이블은 해당 임시 테이블을 생성한 세션에 의해 소유되며, 세션 내에서만 참조**

SQL Server 는 내부적으로, 서로 다른 세션에서 동일한 이름의 임시 테이블을 구분 할 수 있도록 테이블 이름 뒤에 (_) 와 고유한 숫자형 접미사를 추가.
sysobject로 쿼리 시 #T1____00001E 등으로 나오지만 실제 코드에선 #T1 으로 참조.

같은 세션 내에서도 **호출 스택** 의 영향을 받는다.
임시 테이블을 생성한 호출 스택의 상위에선 호출 할수 없고, 하위에서만 호출 할 수 있다.

- 최상위에서 생성 시 : 배치, 프로시저, 트리거 등 사용 가능
- 저장 프로시저 내에서 생성 시 : 해당 프로시저, 해당 프로시저 내에서 호출한 프로시저 또는 트리거.

생성된 영역을 벗어나면 바로 삭제됨. 임시 테이블이 최상위 인 경우 연결이 끊어졌을때 제거.
프로시저 내라면 프로시저가 종료되면 제거. 

### 트랜잭션 컨텍스트

임시테이블이 DML,DDL 구문 내에 포함되는 경우 외부 트랜잭션의 일부로 통합되어 동작. 로그 기록 및 잠금 측면에서 중요한 영향을 미침.

- 로그는 롤백 작업만 지원. 롤포워드는 지원안함(tempdb는 복구 프로세스 없음).
- 잠금 측면에선, 임시 테이블을 생성한 세션 내에서만 접근되므로,
  최소한의 잠금만 설정.

### 통계

쿼리 최적화 프로그램은 임시 테이블을 대상으로도 분포 통계(히스토그램)를 생성, 유지하고 cardinality 정보를 관리한다. 통계 정보는 임시 테이블의 인덱스를 생성 할 때 매우 중요한 역할을 함.

임시 테이블이 성능 통계를 유지하는 것은 테이블 변수와 임시 테이블을 구분짓는 요인.


### Resolution 

- TODO

---------------------------------------------------

## 전역 임시 테이블

임시 테이블 앞에 숫자기호 두개(##)를 사용.

- 모든 세션에서 접근가능.
- 같은 이름으로 여러개 생성 불가능
- 전역 임시 테이블을 생성한 세션이 종료될때까지 유지됨.
  - 저장 프로시저 내에서 생성 시 저장 프로시저가 종료되더라도 유지됨.
  - 임시 테이블을 생성한 세션이 종료 될 때, 다른 세션이 전역 임시 테이블을
    사용 중이라면 모든 문장이 종료되면 임시 테이블을 삭제한다.

* 만일 세션 종료와 라이프타임을 같이 가져가지 않는 것을 원하는 경우
  - SP_접두사를 붙여서 master db에 생성하는 방법이 있음.
  - startup옵션을 필요로한다. 
  - SQL server 는 시작 시 호출되는 자동 시작 저장 프로시저 내에서 생성되는
    전역 임시 테이블의 참조 카운트를 항상 0 보다 크게 유지하고, 이 때문에 삭제하려 하지 않는다.

---------------------------------------------------

# 테이블 변수 개요

- DECLARE 명령어로 생성하고, 변수명 다음에 해당 테이블 변수의 스키마를 지정.
  이후 영구테이블과 같이 참조하여 사용.

## 예시

```sql
DECLARE @T1 TABLE(col1 INT);
INSERT @T1 VALUES(1);

SELECT * FROM @T1;
```

## 제한 사항

- 테이블 변수에는 PRIMARY KEY, UNIQUE 외에 명시적 인덱스 생성 불가능.
  - 고유하지 않은 컬럼에 인덱스 추가 필요시, 고유한 인덱스를 추가하여 복합 컬럼으로 만들어야함.

- 테이블 변수는 선언시 사용된 스키마 정의를 변경 할 수 없음
  - DECLARE 에 모든 정의가 포함되어야함.
  - 테이블 변수 이름으로 컬럼이름을 식별할 수 없다. 이로 인해, 테이블 변수의 컬럼을 상관 서브쿼리에서 참조하는 경우, 컬럼 이름이 모호해질 수 있다.


## tempdb

```sql
SELECT TABLE_NAME FROM tempdb.INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME LIKE '%#%';
```
결과 값 예시
|TABLE_NAME|
|---|
| |


```
GO
DECLARE @T TABLE(col1 INT);
INSERT @T VALUES(1);
SELECT TABLE_NAME FROM tempdb.INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME LIKE '%#%';
```
결과 값 예시
|   | TABLE_NAME|
|---|---|
| 1 | #BB20DE8C |

- 첫 쿼리는 결과가 없지만, 두번째 쿼리에 대해서는 생성한 테이블 변수 `@T` 를
  참조하는 tempdb 데이터베이스 내의 임시테이블 명인 `#BB20DE8C` 이 반환된다.
  
- 테이블 변수를 처리하기 위해 내부적으로 숨겨진 임시 테이블이 생성된다.
- 임시 테이블과 같이, 테이블 변수에 저장되는 데이터가 작고 SQL 서버에 충분한 
  메모리가 남아있다면 데이터 캐시 내에 저장된다.

임시 테이블을 사용할 때 고려해야할 tempdb 데이터베이스에 관련된 내용은
테이블 변수에도 동일하게 적용된다.

## 참조 범위와 가시성

테이블 변수를 생성한 현재 배치 내에서만 사용된다. 
테이블 변수는 하위 수준 배치에서는 접근 할 수 없고, 동일 수준의 
다른 배치에서도 접근할 수 없다.

- 로컬 임시테이블보다 훨씬 제한적이므로, 어떤 임시 객체를 사용할 것인가를
  판단하기 위한 중요한 판단 기준으로 사용된다.


## 트랜잭션 컨텍스트

- 임시 테이블과 달리, 테이블 변수는 외부 트랜잭션의 일부로 동작하지 않는다.
- 테이블 변수는 문장 단위 롤백 기능을 지원하기 위해, 트랜잭션 영역이 
  문장 수준으로만 제한된다.

  - 테이블 변수를 변경하는 문장이 실패한다면, 해당 문장으로 인한 변경만 취소된다.

  - 만일, 해당 문장이 외부 트랜잭션의 일부이고 정상 수행되었으나 
    외부 트랜잭션이 롤백된다면, 완료된 테이블 변수에 대한 변경 작업은
    외부 트랜잭션의 롤백과 상관 없이 취소되지 않는다.

- 테이블 변수의 고유한 트랜잭션 컨텍스트는 로그, 잠금을 최소화 하기 때문에
  임시 테이블 보다 성능 측면에서 장점을 가진다.

## 사용 예시

테이블의 변경 여부를 감사하는 감사용 트리거를 만들어야하는 경우.
- 시도된 변경 내역이 실패하는 경우, 취소하지 않고 감시해야한다. 
- 테이블 변수 사용 시 외부 트랜잭션 영향 없이 실행하려던 내용을 복사해서 
  처리할 수 있다.


## 통계

- 분포 통계를 생성하지 않는다.
- 카디널리티 정보를 유지하지 않는다.
  - 분포 통계 및 카디널리티가 없으므로 비효율적인 쿼리 실행 계획을 생성 할 가능성이 있다.


- TODO : 실제 실행계획 예시 확인.

---------------------------------------------------

# tempdb 고려 사항

- 임시테이블 및 테이블 변수는 물리적으로 tempdb에 저장됨을 유념한다.
- SQL Server 내 작업을 수행하면서 필요한 숨겨진 작업을 tempdb에 저장한다.
  - 쿼리 실행 계획의 부분 데이터를 스풀링, 정렬, 행관리 등.

- tempdb 를 많이 사용하는 시스템의 경우 다른 데이터베이스와 분리하여,
  tempdb 용 전용 디스크 어레이에 별도 저장할 것을 고려한다. 또한 I/O
  처리량을 증가시키기 위해 데이터를 디스크 여러개로 스트라이핑 해야 한다.
  스핀들 수 가 많아질수록 그만큼 성능은 좋아진다.
  이상적인 경우, 데이터는 RAID 1+0 으로 구성, 로그는 RAID 1 로 구성한다.

- SQL 서버 재시작 시 tempdb는 다시 생성되고, 기본값 크기로 돌아간다.
  - 기본값 : 8MB, 10%씩 자동 증가하도록 설정.
  - 자동 증가 작업이 시작되면, 새로운 공간이 할당될 때까지 대기해야함.
  - 기본 크기가 작은 경우, 증가분도 작으므로 파일 시스템 조각화를 유발한다.
  - => 적절한 크기의 tempdb 를 기본값으로 설정해야한다.

- SQL 서버 재시작 시, tempdb가 논리적으로 다시 생성된다.
  - tempdb도 model database 를 복사한다.
    - 영구 개체(영구 테이블, 사용자 정의 형식, 데이터베이스 사용자 등)을 복사 생성 하지만, 재시작 시 모두 삭제됨.    
  - 만일 재시작시에도 남아있는 임시 테이블을 만들고 싶은 경우 다음 방법이 있음.
    - 1) 일부 테이블을 model에도 생성하는 방법.
    - 2) SQL Server 시작 시 사용되는 저장 프로시저를 이용하여 생성.

- 대용량 데이터를 입력하는 경우 성능상 문제 있을 수 있음.
  - 매우 많은 동시 사용자 세션에서 임시 테이블을 생성하게 되면 SQL 서버는
    임시 테이블에 필요한 페이지를 할당하기 위해 경합 현상이 발생한다.
    - SQL Server 2005 에도 완전히 해결되지 못하고 남아 있는 이슈이다.


> 스풀링 - 스풀이란 Simultaneous Peripheral Operation On-Line의 줄임말로서 컴퓨터 시스템에서 중앙처리장치와 입출력장치가 독립적으로 동작하도록 함으로써 중앙처리장치에 비해 주변장치의 처리속도가 느려서 발생하는 대기시간을 줄이기 위해 고안된 기법.

> 스핀들 - HDD 에서 디스크의 플래터(저장 장치) 가 회전할 수 있도록 직접 연결된 축.

> 스트라이핑 - 스트라이핑은 논리적 볼륨의 데이터를 여러 디스크 드라이브에 분산하는 기술로, 디스크 드라이브의 입출력 용량이 논리적 볼륨에 있는 데이터에 액세스하는 데 병렬로 사용될 수 있는 방식으로 진행.

---------------------------------------------------

# 테이블식

- 임시 테이블 및 테이블 변수는 물리적으로 실체화되어 존재한다.
- 테이블 식은 논리적으로만 존재한다. 
- 파생, 공통 테이블식(CTE), 인라인 테이블 값 사용자 정의 함수 등이 있다.

## 목적

주로 코드의 가독성을 높일 목적으로 임시 개체가 필요한 경우 사용된다.
- 임시 개체에 한번 또는 매우 적은 숫자로 엑세스하고, 임시 저장된 데이터에
  인덱스를 생성 할 필요가 없을 때 사용.

- SQL Server 는 테이블식을 물리적으로 실체화하지 않음.
- 쿼리 최적화 프로그램은 외부 쿼리와 내부 쿼리를 병합하여 원본 테이블에 
  직접적으로 엑세스하는 하나의 쿼리 실행 계획을 생성한다.

- 일부 경우 테이블식을 사용하여 성능을 향상 시킬 수 있음.
  - 이런 경우, 옵티마이저는 다른 대안 쿼리보다 테이블식을 사용하는 경우 
    최적화된 실행 계획 생성.

## 참조 범위와 가시성

- 파생, 공통 테이블 식은 현재 문장 내에서만 사용할 수 있음. 
- 뷰, 인라인 테이블 값 사용자 정의 함수는 엑세스 가능한 경우 전역적으로 사용.

---------------------------------------------------

# 임시 테이블, 테이블 변수, 테이블식 비교

| 기능/ 임시 개체 유형 | 로컬 임시 테이블 | 테이블 변수 | 테이블식 |
|--|--|--|--|
| 참조 범위/가시성 | 현재 배치, 하위배치 | 현재 배치 | 파생 테이블, CTE: 현재 배치. 뷰/함수 : 전역 |
| tempdb 물리 저장여부 | 예 | 예 | 아니오 |
| 외부 tx의 일부로 동작 | 예 | 아니오 | 예
| 로그 기록 | tx롤백 지원 | 해당 문장 롤백 지원 | 예 |

---------------------------------------------------

# 참고 자료

- T-SQL Programming : https://www.aladin.co.kr/shop/UsedShop/wuseditemall.aspx?ItemId=864743

- 스트라이핑 : https://www.ibm.com/docs/ko/aix/7.1?topic=performance-tuning-logical-volume-striping

- 스풀링 : https://artsandculture.google.com/entity/m02db92?hl=ko 

- 스핀들 : https://whitesnake1004.tistory.com/273